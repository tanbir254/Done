@page "/csvdata"
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Done.Shared
@using System.Linq
@using System.Collections.Generic


<h3>Upload CSV File</h3>



<form>
    <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="HandleFileUpload" accept=".csv"></Microsoft.AspNetCore.Components.Forms.InputFile>
</form>


@if (csvData != null && csvData.Count > 0)
{
    

    <div class="table-container">
    <table>
        <thead>
            <tr>
                <th>Uid</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Gender</th>
                <th>Birthday</th>
                <th>City</th>
                <th>State</th>
                <th>Zip</th>
                <th>Subscription Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in csvData.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                <tr>
                    <td>@item.Uid</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.Gender</td>
                    <td>@item.Birthday.ToShortDateString()</td>
                    <td>@item.City</td>
                    <td>@item.State</td>
                    <td>@item.Zip</td>
                    <td>@item.SubscriptionDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
    </div>
    <div class="pagination">
        <button class="btn btn-link" disabled="@IsFirstPage" @onclick="GoToPreviousPage">Previous</button>
        <span class="slight-dwn">@currentPage / @TotalPages</span>
        <button class="btn btn-link" disabled="@IsLastPage" @onclick="GoToNextPage">Next</button>
    </div>

       
}




@code {
    private List<CsvDataModel> csvData;
    private int currentPage = 1;
    private int pageSize = 10;

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == TotalPages;
    private int TotalPages => (int)Math.Ceiling(csvData.Count / (double)pageSize);

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using (var stream = file.OpenReadStream(50000000))
            using (var reader = new StreamReader(stream))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                
                csv.Context.RegisterClassMap<CsvDataModelMap>();
                csvData = await csv.GetRecordsAsync<CsvDataModel>().ToListAsync();
            }
        }
    }

    private void GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
        }
    }

    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
        }
    }
}
