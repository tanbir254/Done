@page "/csvdatacharts"
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using Done.Shared
@using System.Linq
@using System.Collections.Generic
@using Blazorise.Charts

<h3>CSV Data Charts</h3>

<form>
    <InputFile OnChange="HandleFileUpload" accept=".csv"></InputFile>
</form>

@if (csvData != null && csvData.Any())
{
    <div class="chart-container">
        <h4>Chart 1</h4>
        <LineChart TItem="int" Data="GetChartData1()" />
    </div>
    <div class="chart-container">
        <h4>Chart 2</h4>
        <BarChart TItem="int" Data="GetChartData2()" />
    </div>
    <div class="chart-container">
        <h4>Chart 3</h4>
        <PieChart TItem="int" Data="GetChartData3()" />
    </div>
}
else
{
    <p>No data available.</p>
}

@code {
    private List<CsvDataGraph> csvData;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        
        if (file != null)
        {
            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                
                csv.Context.RegisterClassMap<CsvDataModelMapp>();
                csvData = await csv.GetRecordsAsync<CsvDataGraph>().ToListAsync();
            }
        }
    }

    private ChartData<int> GetChartData1()
    {
      //  Console.WriteLine(333333333333333);
        // Prepare data for Chart 1
        // Use the csvData list to generate the chart data
        // Example: Group by Gender and count occurrences
        var genderCounts = csvData.GroupBy(d => d.Gender)
                                  .Select(g => g.Count())
                                  .ToList();
      //  Console.WriteLine(11111111111111);
        var chartData = new ChartData<int>
            {
                Labels = genderCounts.Select((_, index) => (object)$"Gender {index + 1}").ToList(), // Explicit cast to List<object>
                Datasets = new List<ChartDataset<int>>
        {
            new ChartDataset<int>
            {
                Label = "Gender Counts",
                Data = genderCounts
            }
        }
            };
      //  Console.WriteLine(2222222222222222222);
        return chartData;
    }

    private ChartData<int> GetChartData2()
    {
        // Prepare data for Chart 2
        // Use the csvData list to generate the chart data
        // Example: Group by City and count occurrences
        var cityCounts = csvData.GroupBy(d => d.City)
                                .Select(g => g.Count())
                                .ToList();

        var chartData = new ChartData<int>
            {
                Labels = cityCounts.Select((_, index) => (object)$"City {index + 1}").ToList(), // Explicit cast to List<object>
                Datasets = new List<ChartDataset<int>>
        {
            new ChartDataset<int>
            {
                Label = "City Counts",
                Data = cityCounts
            }
        }
            };

        return chartData;
    }

    private ChartData<int> GetChartData3()
    {
        // Prepare data for Chart 3
        // Use the csvData list to generate the chart data
        // Example: Group by State and count occurrences
        var stateCounts = csvData.GroupBy(d => d.State)
                                 .Select(g => g.Count())
                                 .ToList();

        var chartData = new ChartData<int>
            {
                Labels = stateCounts.Select((_, index) => (object)$"State {index + 1}").ToList(), // Explicit cast to List<object>
                Datasets = new List<ChartDataset<int>>
        {
            new ChartDataset<int>
            {
                Label = "State Counts",
                Data = stateCounts
            }
        }
            };

        return chartData;
    }

    // CSV mapping class
    public sealed class CsvDataModelMapp : ClassMap<CsvDataGraph>
    {
        public CsvDataModelMapp()
        {
            // Map CSV columns to CsvDataGraph properties
            Map(m=>m.Uid).Name("uid");
            Map(m => m.FirstName).Name("first_name");
            Map(m => m.LastName).Name("last_name");
            Map(m => m.Gender).Name("gender");
            Map(m => m.Birthday).Name("b_day");
            Map(m => m.City).Name("city");
            Map(m => m.State).Name("state");
            Map(m => m.Zip).Name("zip");
            Map(m => m.SubscriptionDate).Name("subs_date");
            // Add more mappings if needed
        }
    }
}
